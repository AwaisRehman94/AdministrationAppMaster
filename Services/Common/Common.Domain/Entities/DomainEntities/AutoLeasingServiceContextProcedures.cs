// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Common.Domain.DomainEntities.Entities.DomainEntities;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Common.Domain.DomainEntities.Entities.DomainEntities
{
    public partial class AutoLeasingServiceContext
    {
        private IAutoLeasingServiceContextProcedures _procedures;

        public virtual IAutoLeasingServiceContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AutoLeasingServiceContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAutoLeasingServiceContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<AutoleasingBankStatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AutoLeasingBulkAutoRenewalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<AutoleasingNajmResponseTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckIfDiscountCodeIsConsumedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckIfEmailAlreadyUsedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckIfIbanAlreadyUsedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CheckIfPhoneAlreadyUsedResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ClientPolicyLogDetailsSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ConfirmUserEmailDBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<ConfirmUserPhoneNumberDBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CopyAdditionalDriversToNewQuotationRequestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<CreateUserTicketResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GatAllWareefDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GeQuotationByPolicyNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetActivePoliciesByNinAndVehicleIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdditionalDriversResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdditionalDrivers2Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdditionalDrivers3Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdditionalDrivers4Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAdditionalDriversDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAddressResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllAddressByNinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllApprovalsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllAutoleaseUsersFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllCorporateAccountsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllCorporatePoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllCorporateUsersFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllDeserviesOfferFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllFailedMorniRequestsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllMyInvoicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllMyPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllMySadadBillsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllMyVehiclesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllOccupationsWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllODPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllPoliciesForClaimsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllPoliciesInfoFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllPoliciesWithDuplicateDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllRenewalDiscountCodesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllRenewalPoliciesFormMessagesWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllUserActivePoliciesCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllVechileCancellationPoliciesFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllVehiclePoliciesForClaimsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllWareefDataByCategoryIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllYakeenCityCentersWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAssignedDriverNinByEmail_SPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleaseAllInvoicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleaseCancelledPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleaseFailedPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleaseSuccessPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleaseSuccessPoliciesForAddDriverResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingBankRenewalPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingBankRenewalPolicies_OldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingCompaniesByUserIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingInvoiceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingPolicyReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingQuotaionReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingQuotationFormSettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingQuotationResponseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingRenewalQuotationsDetailsForHistorySettingsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingVehiclePoliciesCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingWalletHistoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAutoleasingWalletReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBcareWithdrawalListWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetBulkQuotationsDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCheckoutAdditionalDriversResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCheckoutDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCheckoutDetailTempResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetClaimsDataBasedOnFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetClaimsDataBasedOnIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCompanyQuotationResponseForInitialQuoteResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCorporateUsersLessThan2000Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCountPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCountPoliciesForAutoleasingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetCustomCardSuccessPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDriverByNinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDriverInsuranceRecordDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDriverLicenseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetDriversWithMoreThanFivePoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEdaatNotificationDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetEdaatRequestsByNationalIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetExpiredEsalInvoicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFailedPaymentTransferredOperationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFirstYearPolicyStatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromAutoleasingQuotationResponseCacheResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromCheckoutByReferenceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromQuotationResponseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromQuotationResponseCacheResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromQuotationResponseCacheAutoleasingResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromScheduleTaskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromSMSSkippedNumbersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetHyperpayRequestByMerchantTransactionIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetHyperpayRequestByReferenceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetHyperpayRequestInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetIInsuredByNationalIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetIncomeReportWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetInsuracneProposalPolicesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetIntialQuotationResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetIVRRenewalePolicyDriversCheckoutuserIdAndPolicyNoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLastPolicyBySequenceOrCustomCardNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLastPruchasedCheckoutDetailsByNINResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLeasingOrderItemByReferenceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLeasingPolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLeasingProfileBasicDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetleasingprofilePolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLeasingShoppingCartItemDBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetLowestProductByPriceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetNajmAverageResponseTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOldPolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetOwnDamageQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPaymentMethodsStatisticsInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPoliciesCountStatisticsForBcareWithdrawalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyForOwnDamageSMSResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyInfoForRenewalResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyInformationForMorniResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyInformationForRoadAssistanceResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyProcessingQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyRequestTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyStatisticsDataResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPreviousPolicyDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPriceDetailsByProductIdsListResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProcessingQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetProductDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPurchaseStatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationBlockedUserDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationDetailsByReferenceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationInsuranceCompanyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationRequestAndDriversInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationRequestDataDBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationRequestVehicleInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationResponseResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationsDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationsFormDetailsByExternalIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetRenewalPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetRequestInfoForApplePayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSamaReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSamaReportPoliciesFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShadowAccountDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShoppingCartItemResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetShoppingCartItemDBResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetSmsRenewalNotificationsRehitResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTabbyItemsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTicketDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTicketHistoriesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTicketHistoryForExportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTicketTypesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetTotalVehicleSadadRequestsPerDayResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserActivePoliciesByNinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserActivePoliciesCountResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserAddressesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserByPhoneResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserDBByIDResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserFailedPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserInvoiceByInvoiceIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserPromotionProgramResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserPromotionProgramInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserPromotionProgramInfo1Result>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserSuccessPoliciesResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserSuccessPoliciesDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserSuccessPoliciesDetailsForCorprateResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserSuccessPoliciesInfoResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserTicketHistoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetUserTicketsWithLastHistoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclePolicyResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclePolicyDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclesByNinResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclesBySequenceNumberORCustomCardNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclesInfoByExternalIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehiclesInfoByIdResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehicleSuccessPoliciesWithFilterForAddBenefitsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVehicleSuccessPoliciesWithFilterForAddvechiledriverResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetVerifiedEmailCheckoutDetailResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetWareefCategoryPartnersResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetWareefDiscountsListSPResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetWareefItemsDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetWataniyaNajmProcessingQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertIntoProcessingQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<InsertUserTicketAttahmentResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<IVRGetLastPolicyBySequenceOrCustomCardNumberResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<MegaReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<NajmResponseTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<PolicyCheckoutDetailsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<policyInfoForODResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RemoveUserIdFromQuotationRequestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<RenwalStatitics_OldTableResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SamaStatisticsCountReportResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SamaStatisticsReport_TestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<sp_WhoIsActiveResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SuccessPolicystatisticsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateAutoleasingQuotationForm_OldHistoryResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateCheckoutWithPaymentStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateCheckoutWithPolicyStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateHyperpayRequestStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateQuotationRequestAdditionalDriversRelationShipResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateQuotationResponseToBeCheckedoutResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<updateRenewalStatiscs_oldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateScheduleTaskResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<UpdateUserPromotionProgramWithNationalIdResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AutoLeasingServiceContextProcedures : IAutoLeasingServiceContextProcedures
    {
        private readonly AutoLeasingServiceContext _context;

        public AutoLeasingServiceContextProcedures(AutoLeasingServiceContext context)
        {
            _context = context;
        }

        public virtual async Task<List<AutoleasingBankStatisticsResult>> AutoleasingBankStatisticsAsync(int? bankId, string startDate, string endDate, int? InsuranceCompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Size = 450,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Size = 450,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutoleasingBankStatisticsResult>("EXEC @returnValue = [dbo].[AutoleasingBankStatistics] @bankId, @startDate, @endDate, @InsuranceCompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AutoLeasingBulkAutoRenewalResult>> AutoLeasingBulkAutoRenewalAsync(int? BankId, string ReferenceId, bool? OutCustomer, int? OutCustomerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BankId",
                    Value = BankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OutCustomer",
                    Value = OutCustomer ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "OutCustomerId",
                    Value = OutCustomerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutoLeasingBulkAutoRenewalResult>("EXEC @returnValue = [dbo].[AutoLeasingBulkAutoRenewal] @BankId, @ReferenceId, @OutCustomer, @OutCustomerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AutoleasingNajmResponseTimeResult>> AutoleasingNajmResponseTimeAsync(int? BankId, string PolicyNo, string ReferenceNo, int? CompanyId, int? Export, string StartDate, string EndDate, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "BankId",
                    Value = BankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 200,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 200,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Export",
                    Value = Export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 200,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 200,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AutoleasingNajmResponseTimeResult>("EXEC @returnValue = [dbo].[AutoleasingNajmResponseTime] @BankId, @PolicyNo, @ReferenceNo, @CompanyId, @Export, @StartDate, @EndDate, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckIfDiscountCodeIsConsumedResult>> CheckIfDiscountCodeIsConsumedAsync(string vehicleId, string code, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 100,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "code",
                    Size = 100,
                    Value = code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckIfDiscountCodeIsConsumedResult>("EXEC @returnValue = [dbo].[CheckIfDiscountCodeIsConsumed] @vehicleId, @code", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckIfEmailAlreadyUsedResult>> CheckIfEmailAlreadyUsedAsync(string email, string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 510,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckIfEmailAlreadyUsedResult>("EXEC @returnValue = [dbo].[CheckIfEmailAlreadyUsed] @email, @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckIfIbanAlreadyUsedResult>> CheckIfIbanAlreadyUsedAsync(string iban, string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "iban",
                    Size = 100,
                    Value = iban ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckIfIbanAlreadyUsedResult>("EXEC @returnValue = [dbo].[CheckIfIbanAlreadyUsed] @iban, @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CheckIfPhoneAlreadyUsedResult>> CheckIfPhoneAlreadyUsedAsync(string phoneNumber, string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "phoneNumber",
                    Size = 100,
                    Value = phoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CheckIfPhoneAlreadyUsedResult>("EXEC @returnValue = [dbo].[CheckIfPhoneAlreadyUsed] @phoneNumber, @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ClientPolicyLogDetailsSPResult>> ClientPolicyLogDetailsSPAsync(string referanceId, string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referanceId",
                    Size = 100,
                    Value = referanceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ClientPolicyLogDetailsSPResult>("EXEC @returnValue = [dbo].[ClientPolicyLogDetailsSP] @referanceId, @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ConfirmUserEmailDBResult>> ConfirmUserEmailDBAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ConfirmUserEmailDBResult>("EXEC @returnValue = [dbo].[ConfirmUserEmailDB] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ConfirmUserPhoneNumberDBResult>> ConfirmUserPhoneNumberDBAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ConfirmUserPhoneNumberDBResult>("EXEC @returnValue = [dbo].[ConfirmUserPhoneNumberDB] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CopyAdditionalDriversToNewQuotationRequestResult>> CopyAdditionalDriversToNewQuotationRequestAsync(int? quotationId, int? initialQuotationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quotationId",
                    Value = quotationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "initialQuotationId",
                    Value = initialQuotationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CopyAdditionalDriversToNewQuotationRequestResult>("EXEC @returnValue = [dbo].[CopyAdditionalDriversToNewQuotationRequest] @quotationId, @initialQuotationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CreateUserTicketResult>> CreateUserTicketAsync(string userId, string checkedoutEmail, string checkedoutPhone, string userEmail, string userPhone, int? ticketTypeId, string userNotes, DateTime? createdDate, int? policyId, string policyNo, int? invoiceId, int? invoiceNo, string referenceId, string driverNin, Guid? vehicleId, string sequenceNumber, string customCardNumber, string createdBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkedoutEmail",
                    Size = 512,
                    Value = checkedoutEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkedoutPhone",
                    Size = 40,
                    Value = checkedoutPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userEmail",
                    Size = 256,
                    Value = userEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userPhone",
                    Size = 40,
                    Value = userPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ticketTypeId",
                    Value = ticketTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userNotes",
                    Size = 400,
                    Value = userNotes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "createdDate",
                    Value = createdDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "policyId",
                    Value = policyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 72,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "invoiceId",
                    Value = invoiceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "invoiceNo",
                    Value = invoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 40,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "sequenceNumber",
                    Size = 60,
                    Value = sequenceNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "customCardNumber",
                    Size = 60,
                    Value = customCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "createdBy",
                    Size = 512,
                    Value = createdBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CreateUserTicketResult>("EXEC @returnValue = [dbo].[CreateUserTicket] @userId, @checkedoutEmail, @checkedoutPhone, @userEmail, @userPhone, @ticketTypeId, @userNotes, @createdDate, @policyId, @policyNo, @invoiceId, @invoiceNo, @referenceId, @driverNin, @vehicleId, @sequenceNumber, @customCardNumber, @createdBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> DeleteAllAddressAsync(string driverNin, DateTime? date, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "date",
                    Value = date ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[DeleteAllAddress] @driverNin, @date", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> ExpireQuotationResponsesAsync(int? RequestId, int? InsuredId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RequestId",
                    Value = RequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredId",
                    Value = InsuredId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[ExpireQuotationResponses] @RequestId, @InsuredId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GatAllWareefDataResult>> GatAllWareefDataAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GatAllWareefDataResult>("EXEC @returnValue = [dbo].[GatAllWareefData]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GeQuotationByPolicyNoResult>> GeQuotationByPolicyNoAsync(string policyNo, int? companyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyId",
                    Value = companyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GeQuotationByPolicyNoResult>("EXEC @returnValue = [dbo].[GeQuotationByPolicyNo] @policyNo, @companyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetActivePoliciesByNinAndVehicleIdResult>> GetActivePoliciesByNinAndVehicleIdAsync(string nin, string vehicleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 100,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetActivePoliciesByNinAndVehicleIdResult>("EXEC @returnValue = [dbo].[GetActivePoliciesByNinAndVehicleId] @nin, @vehicleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdditionalDriversResult>> GetAdditionalDriversAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdditionalDriversResult>("EXEC @returnValue = [dbo].[GetAdditionalDrivers]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdditionalDrivers2Result>> GetAdditionalDrivers2Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdditionalDrivers2Result>("EXEC @returnValue = [dbo].[GetAdditionalDrivers2]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdditionalDrivers3Result>> GetAdditionalDrivers3Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdditionalDrivers3Result>("EXEC @returnValue = [dbo].[GetAdditionalDrivers3]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdditionalDrivers4Result>> GetAdditionalDrivers4Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdditionalDrivers4Result>("EXEC @returnValue = [dbo].[GetAdditionalDrivers4]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAdditionalDriversDataResult>> GetAdditionalDriversDataAsync(string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 256,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAdditionalDriversDataResult>("EXEC @returnValue = [dbo].[GetAdditionalDriversData] @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAddressResult>> GetAddressAsync(string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAddressResult>("EXEC @returnValue = [dbo].[GetAddress] @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllAddressByNinResult>> GetAllAddressByNinAsync(string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllAddressByNinResult>("EXEC @returnValue = [dbo].[GetAllAddressByNin] @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllApprovalsFromDBWithFilterResult>> GetAllApprovalsFromDBWithFilterAsync(string NationalId, string Email, string StartDate, string EndDate, int? ApprovedStatus, int? PendingStatus, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 100,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 100,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ApprovedStatus",
                    Value = ApprovedStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PendingStatus",
                    Value = PendingStatus ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllApprovalsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllApprovalsFromDBWithFilter] @NationalId, @Email, @StartDate, @EndDate, @ApprovedStatus, @PendingStatus, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllAutoleaseUsersFromDBWithFilterResult>> GetAllAutoleaseUsersFromDBWithFilterAsync(string Email, string PhoneNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 450,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNumber",
                    Size = 30,
                    Value = PhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllAutoleaseUsersFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllAutoleaseUsersFromDBWithFilter] @Email, @PhoneNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllCorporateAccountsFromDBWithFilterResult>> GetAllCorporateAccountsFromDBWithFilterAsync(string name, int? pageIndex, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "name",
                    Size = 450,
                    Value = name ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageIndex",
                    Value = pageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllCorporateAccountsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllCorporateAccountsFromDBWithFilter] @name, @pageIndex, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllCorporatePoliciesResult>> GetAllCorporatePoliciesAsync(int? corporateAccountId, int? pageNumber, int? pageSize, string policyNumber, string insuredNIN, string sequenceOrCustomCardNumber, string from, string to, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "corporateAccountId",
                    Value = corporateAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyNumber",
                    Size = 72,
                    Value = policyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuredNIN",
                    Size = 40,
                    Value = insuredNIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "from",
                    Size = 100,
                    Value = from ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "to",
                    Size = 100,
                    Value = to ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllCorporatePoliciesResult>("EXEC @returnValue = [dbo].[GetAllCorporatePolicies] @corporateAccountId, @pageNumber, @pageSize, @policyNumber, @insuredNIN, @sequenceOrCustomCardNumber, @from, @to", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllCorporateUsersFromDBWithFilterResult>> GetAllCorporateUsersFromDBWithFilterAsync(string Email, string PhoneNumber, int? accountId, int? pageIndex, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 450,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PhoneNumber",
                    Size = 30,
                    Value = PhoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "accountId",
                    Value = accountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageIndex",
                    Value = pageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllCorporateUsersFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllCorporateUsersFromDBWithFilter] @Email, @PhoneNumber, @accountId, @pageIndex, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllDeserviesOfferFromDBWithFilterResult>> GetAllDeserviesOfferFromDBWithFilterAsync(string NationalId, string Mobile, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Mobile",
                    Size = 100,
                    Value = Mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllDeserviesOfferFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllDeserviesOfferFromDBWithFilter] @NationalId, @Mobile, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllFailedMorniRequestsResult>> GetAllFailedMorniRequestsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllFailedMorniRequestsResult>("EXEC @returnValue = [dbo].[GetAllFailedMorniRequests]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAllMakerModelsAsync(string makerCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "makerCode",
                    Size = 100,
                    Value = makerCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAllMakerModels] @makerCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAllMakersWithFilterAsync(string code, string description, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "code",
                    Size = 100,
                    Value = code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAllMakersWithFilter] @code, @description, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAllModelsWithFilterAsync(string code, string makerCode, string description, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "code",
                    Size = 100,
                    Value = code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "makerCode",
                    Size = 100,
                    Value = makerCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAllModelsWithFilter] @code, @makerCode, @description, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllMyInvoicesResult>> GetAllMyInvoicesAsync(string userId, int? pageNumber, int? pageSize, int? invoiceNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "invoiceNumber",
                    Value = invoiceNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllMyInvoicesResult>("EXEC @returnValue = [dbo].[GetAllMyInvoices] @userId, @pageNumber, @pageSize, @invoiceNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllMyPoliciesResult>> GetAllMyPoliciesAsync(string userId, int? pageNumber, int? pageSize, string policyNumber, string insuredNIN, string sequenceOrCustomCardNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyNumber",
                    Size = 72,
                    Value = policyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuredNIN",
                    Size = 40,
                    Value = insuredNIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllMyPoliciesResult>("EXEC @returnValue = [dbo].[GetAllMyPolicies] @userId, @pageNumber, @pageSize, @policyNumber, @insuredNIN, @sequenceOrCustomCardNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllMySadadBillsResult>> GetAllMySadadBillsAsync(string userId, int? pageIndex, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageIndex",
                    Value = pageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllMySadadBillsResult>("EXEC @returnValue = [dbo].[GetAllMySadadBills] @userId, @pageIndex, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllMyVehiclesResult>> GetAllMyVehiclesAsync(string userId, int? pageNumber, int? pageSize, string sequenceOrCustomCardNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllMyVehiclesResult>("EXEC @returnValue = [dbo].[GetAllMyVehicles] @userId, @pageNumber, @pageSize, @sequenceOrCustomCardNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllOccupationsWithFilterResult>> GetAllOccupationsWithFilterAsync(string code, string description, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "code",
                    Size = 100,
                    Value = code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "description",
                    Size = 100,
                    Value = description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllOccupationsWithFilterResult>("EXEC @returnValue = [dbo].[GetAllOccupationsWithFilter] @code, @description, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllODPoliciesResult>> GetAllODPoliciesAsync(string userId, int? pageNumber, int? pageSize, string policyNumber, string insuredNIN, string sequenceOrCustomCardNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyNumber",
                    Size = 72,
                    Value = policyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuredNIN",
                    Size = 40,
                    Value = insuredNIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllODPoliciesResult>("EXEC @returnValue = [dbo].[GetAllODPolicies] @userId, @pageNumber, @pageSize, @policyNumber, @insuredNIN, @sequenceOrCustomCardNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllPoliciesForClaimsFromDBWithFilterResult>> GetAllPoliciesForClaimsFromDBWithFilterAsync(string VehicleId, int? NationalId, string PolicyNo, int? bankId, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 30,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 100,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllPoliciesForClaimsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllPoliciesForClaimsFromDBWithFilter] @VehicleId, @NationalId, @PolicyNo, @bankId, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAllPoliciesFromDBWithFilterAsync(string startDateString, string endDateString, int? pageNumber, int? pageSize, string sortField, int? sortOrder, string PolicyNo, string NationalId, string ReferenceNo, string SequenceNo, string CustomNo, string InsuredEmail, string InsuredFirstNameAr, string InsuredLastNameAr, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, int? ProductTypeId, string Channel, Guid? merchantId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDateString",
                    Size = 100,
                    Value = startDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDateString",
                    Size = 100,
                    Value = endDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "sortField",
                    Size = 100,
                    Value = sortField ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sortOrder",
                    Value = sortOrder ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SequenceNo",
                    Size = 20,
                    Value = SequenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomNo",
                    Size = 20,
                    Value = CustomNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredEmail",
                    Size = 100,
                    Value = InsuredEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredFirstNameAr",
                    Size = 100,
                    Value = InsuredFirstNameAr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredLastNameAr",
                    Size = 100,
                    Value = InsuredLastNameAr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductTypeId",
                    Value = ProductTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Channel",
                    Size = 40,
                    Value = Channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "merchantId",
                    Value = merchantId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAllPoliciesFromDBWithFilter] @startDateString, @endDateString, @pageNumber, @pageSize, @sortField, @sortOrder, @PolicyNo, @NationalId, @ReferenceNo, @SequenceNo, @CustomNo, @InsuredEmail, @InsuredFirstNameAr, @InsuredLastNameAr, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @ProductTypeId, @Channel, @merchantId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllPoliciesInfoFromDBWithFilterResult>> GetAllPoliciesInfoFromDBWithFilterAsync(string PolicyNo, int? InsuranceCompanyId, string ReferenceNo, int? NajmStatusId, int? InvoiceNo, int? PaymentMethodId, int? PageNumber, int? PageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PaymentMethodId",
                    Value = PaymentMethodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllPoliciesInfoFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllPoliciesInfoFromDBWithFilter] @PolicyNo, @InsuranceCompanyId, @ReferenceNo, @NajmStatusId, @InvoiceNo, @PaymentMethodId, @PageNumber, @PageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllPoliciesWithDuplicateDataResult>> GetAllPoliciesWithDuplicateDataAsync(DateTime? dateFrom, DateTime? dateTo, int? DuplicateData, int? PageNumber, int? PageSize, int? isExport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DuplicateData",
                    Value = DuplicateData ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isExport",
                    Value = isExport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllPoliciesWithDuplicateDataResult>("EXEC @returnValue = [dbo].[GetAllPoliciesWithDuplicateData] @dateFrom, @dateTo, @DuplicateData, @PageNumber, @PageSize, @isExport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllRenewalDiscountCodesResult>> GetAllRenewalDiscountCodesAsync(string code, decimal? Percentage, DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "code",
                    Size = 100,
                    Value = code ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Percentage",
                    Precision = 8,
                    Scale = 2,
                    Value = Percentage ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Decimal,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllRenewalDiscountCodesResult>("EXEC @returnValue = [dbo].[GetAllRenewalDiscountCodes] @code, @Percentage, @StartDate, @EndDate, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllRenewalPoliciesFormMessagesWithFilterResult>> GetAllRenewalPoliciesFormMessagesWithFilterAsync(string Nin, string VehicleId, string Lang, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nin",
                    Size = 100,
                    Value = Nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Lang",
                    Size = 100,
                    Value = Lang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllRenewalPoliciesFormMessagesWithFilterResult>("EXEC @returnValue = [dbo].[GetAllRenewalPoliciesFormMessagesWithFilter] @Nin, @VehicleId, @Lang, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAllTicketsWithFilterAsync(string lang, int? id, string userEmail, string startDateString, string endDateString, int? statusId, string NationalId, string PolicyNo, int? InvoiceNo, string checkedOutEmail, string checkedOutPhone, string ReferenceNo, int? ticketTypeId, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "lang",
                    Size = 2,
                    Value = lang ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userEmail",
                    Size = 100,
                    Value = userEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDateString",
                    Size = 100,
                    Value = startDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDateString",
                    Size = 100,
                    Value = endDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "checkedOutEmail",
                    Size = 100,
                    Value = checkedOutEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkedOutPhone",
                    Size = 100,
                    Value = checkedOutPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ticketTypeId",
                    Value = ticketTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAllTicketsWithFilter] @lang, @id, @userEmail, @startDateString, @endDateString, @statusId, @NationalId, @PolicyNo, @InvoiceNo, @checkedOutEmail, @checkedOutPhone, @ReferenceNo, @ticketTypeId, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllUserActivePoliciesCountResult>> GetAllUserActivePoliciesCountAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllUserActivePoliciesCountResult>("EXEC @returnValue = [dbo].[GetAllUserActivePoliciesCount] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllVechileCancellationPoliciesFromDBWithFilterResult>> GetAllVechileCancellationPoliciesFromDBWithFilterAsync(string NationalId, string VehicleId, string PolicyNo, string ReferenceId, int? PageSize, int? PageNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 100,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 40,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllVechileCancellationPoliciesFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllVechileCancellationPoliciesFromDBWithFilter] @NationalId, @VehicleId, @PolicyNo, @ReferenceId, @PageSize, @PageNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllVehiclePoliciesForClaimsFromDBWithFilterResult>> GetAllVehiclePoliciesForClaimsFromDBWithFilterAsync(string VehicleId, int? NationalId, string PolicyNo, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 30,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 100,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllVehiclePoliciesForClaimsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllVehiclePoliciesForClaimsFromDBWithFilter] @VehicleId, @NationalId, @PolicyNo, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllWareefDataByCategoryIDResult>> GetAllWareefDataByCategoryIDAsync(int? CategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllWareefDataByCategoryIDResult>("EXEC @returnValue = [dbo].[GetAllWareefDataByCategoryID] @CategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllYakeenCityCentersWithFilterResult>> GetAllYakeenCityCentersWithFilterAsync(int? cityId, string cityName, int? zipCode, int? elmCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "cityId",
                    Value = cityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "cityName",
                    Size = 100,
                    Value = cityName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "zipCode",
                    Value = zipCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "elmCode",
                    Value = elmCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllYakeenCityCentersWithFilterResult>("EXEC @returnValue = [dbo].[GetAllYakeenCityCentersWithFilter] @cityId, @cityName, @zipCode, @elmCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAssignedDriverNinByEmail_SPResult>> GetAssignedDriverNinByEmail_SPAsync(string email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 510,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAssignedDriverNinByEmail_SPResult>("EXEC @returnValue = [dbo].[GetAssignedDriverNinByEmail_SP] @email", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleaseAllInvoicesResult>> GetAutoleaseAllInvoicesAsync(DateTime? startDate, DateTime? endDate, string PolicyNo, string ReferenceNo, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, int? bankId, string UserEmail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmail",
                    Size = 1000,
                    Value = UserEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleaseAllInvoicesResult>("EXEC @returnValue = [dbo].[GetAutoleaseAllInvoices] @startDate, @endDate, @PolicyNo, @ReferenceNo, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @bankId, @UserEmail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleaseCancelledPoliciesResult>> GetAutoleaseCancelledPoliciesAsync(DateTime? startDate, DateTime? endDate, string PolicyNo, string ReferenceNo, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, int? bankId, int? PageNumber, int? PageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleaseCancelledPoliciesResult>("EXEC @returnValue = [dbo].[GetAutoleaseCancelledPolicies] @startDate, @endDate, @PolicyNo, @ReferenceNo, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @bankId, @PageNumber, @PageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleaseFailedPoliciesResult>> GetAutoleaseFailedPoliciesAsync(DateTime? startDate, DateTime? endDate, string PolicyNo, string ReferenceNo, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, int? bankId, int? PageNumber, int? PageSize, int? export, string UserEmail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmail",
                    Size = 1000,
                    Value = UserEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleaseFailedPoliciesResult>("EXEC @returnValue = [dbo].[GetAutoleaseFailedPolicies] @startDate, @endDate, @PolicyNo, @ReferenceNo, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @bankId, @PageNumber, @PageSize, @export, @UserEmail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleaseSuccessPoliciesResult>> GetAutoleaseSuccessPoliciesAsync(DateTime? startDate, DateTime? endDate, string PolicyNo, string ReferenceNo, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, int? bankId, int? PageNumber, int? PageSize, int? export, string UserEmail, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserEmail",
                    Size = 1000,
                    Value = UserEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleaseSuccessPoliciesResult>("EXEC @returnValue = [dbo].[GetAutoleaseSuccessPolicies] @startDate, @endDate, @PolicyNo, @ReferenceNo, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @bankId, @PageNumber, @PageSize, @export, @UserEmail", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleaseSuccessPoliciesForAddDriverResult>> GetAutoleaseSuccessPoliciesForAddDriverAsync(string PolicyNo, string ReferenceNo, string InsuredId, int? bankId, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredId",
                    Size = 30,
                    Value = InsuredId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleaseSuccessPoliciesForAddDriverResult>("EXEC @returnValue = [dbo].[GetAutoleaseSuccessPoliciesForAddDriver] @PolicyNo, @ReferenceNo, @InsuredId, @bankId, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingBankRenewalPoliciesResult>> GetAutoleasingBankRenewalPoliciesAsync(int? bankId, string nationalId, DateTime? dateFrom, DateTime? dateTo, bool? isExcel, int? channel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 100,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "isExcel",
                    Value = isExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "channel",
                    Value = channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingBankRenewalPoliciesResult>("EXEC @returnValue = [dbo].[GetAutoleasingBankRenewalPolicies] @bankId, @nationalId, @dateFrom, @dateTo, @isExcel, @channel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingBankRenewalPolicies_OldResult>> GetAutoleasingBankRenewalPolicies_OldAsync(int? bankId, string nationalId, DateTime? dateFrom, DateTime? dateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 100,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingBankRenewalPolicies_OldResult>("EXEC @returnValue = [dbo].[GetAutoleasingBankRenewalPolicies_Old] @bankId, @nationalId, @dateFrom, @dateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingCompaniesByUserIdResult>> GetAutoleasingCompaniesByUserIdAsync(string UserId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 256,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingCompaniesByUserIdResult>("EXEC @returnValue = [dbo].[GetAutoleasingCompaniesByUserId] @UserId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingInvoiceResult>> GetAutoleasingInvoiceAsync(int? insuranceCompanyID, string startDate, string endDate, string ReferenceId, string PolicyNo, string NIN, int? InvoiceNo, int? pageNumber, int? pageSize, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Size = 100,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Size = 100,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 512,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 512,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NIN",
                    Size = 512,
                    Value = NIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingInvoiceResult>("EXEC @returnValue = [dbo].[GetAutoleasingInvoice] @insuranceCompanyID, @startDate, @endDate, @ReferenceId, @PolicyNo, @NIN, @InvoiceNo, @pageNumber, @pageSize, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingPolicyReportResult>> GetAutoleasingPolicyReportAsync(string quotationNumber, string policyNumber, int? insuranceCompanyID, DateTime? startDate, DateTime? endDate, string nationalId, string email, string mobile, string vehicleId, string chassisNo, int? pageNumber, int? pageSize, bool? isExcel, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quotationNumber",
                    Size = 100,
                    Value = quotationNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNumber",
                    Size = 100,
                    Value = policyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 40,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 512,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 100,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 100,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "chassisNo",
                    Size = 100,
                    Value = chassisNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isExcel",
                    Value = isExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingPolicyReportResult>("EXEC @returnValue = [dbo].[GetAutoleasingPolicyReport] @quotationNumber, @policyNumber, @insuranceCompanyID, @startDate, @endDate, @nationalId, @email, @mobile, @vehicleId, @chassisNo, @pageNumber, @pageSize, @isExcel, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingQuotaionReportResult>> GetAutoleasingQuotaionReportAsync(string quotationNumber, int? insuranceCompanyID, bool? status, DateTime? startDate, DateTime? endDate, string nationalId, string email, string mobile, string vehicleId, string chassisNo, int? pageNumber, int? pageSize, bool? isExcel, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quotationNumber",
                    Size = 100,
                    Value = quotationNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "status",
                    Value = status ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 40,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 512,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 100,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 40,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "chassisNo",
                    Size = 100,
                    Value = chassisNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isExcel",
                    Value = isExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingQuotaionReportResult>("EXEC @returnValue = [dbo].[GetAutoleasingQuotaionReport] @quotationNumber, @insuranceCompanyID, @status, @startDate, @endDate, @nationalId, @email, @mobile, @vehicleId, @chassisNo, @pageNumber, @pageSize, @isExcel, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingQuotationFormSettingsResult>> GetAutoleasingQuotationFormSettingsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingQuotationFormSettingsResult>("EXEC @returnValue = [dbo].[GetAutoleasingQuotationFormSettings]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingQuotationResponseResult>> GetAutoleasingQuotationResponseAsync(string ReferenceId, string productId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productId",
                    Size = 100,
                    Value = productId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingQuotationResponseResult>("EXEC @returnValue = [dbo].[GetAutoleasingQuotationResponse] @ReferenceId, @productId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingRenewalQuotationsDetailsForHistorySettingsResult>> GetAutoleasingRenewalQuotationsDetailsForHistorySettingsAsync(string externalId, int? deductible, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 30,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "deductible",
                    Value = deductible ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingRenewalQuotationsDetailsForHistorySettingsResult>("EXEC @returnValue = [dbo].[GetAutoleasingRenewalQuotationsDetailsForHistorySettings] @externalId, @deductible", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingVehiclePoliciesCountResult>> GetAutoleasingVehiclePoliciesCountAsync(string vehicleId, string nin, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 100,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingVehiclePoliciesCountResult>("EXEC @returnValue = [dbo].[GetAutoleasingVehiclePoliciesCount] @vehicleId, @nin, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingWalletHistoryResult>> GetAutoleasingWalletHistoryAsync(int? insuranceCompanyID, string startDate, string endDate, string email, int? pageNumber, int? pageSize, bool? isExcel, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Size = 100,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Size = 100,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 512,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isExcel",
                    Value = isExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingWalletHistoryResult>("EXEC @returnValue = [dbo].[GetAutoleasingWalletHistory] @insuranceCompanyID, @startDate, @endDate, @email, @pageNumber, @pageSize, @isExcel, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAutoleasingWalletReportResult>> GetAutoleasingWalletReportAsync(int? insuranceCompanyID, string startDate, string endDate, string email, string mobile, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Size = 100,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Size = 100,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 512,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 100,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAutoleasingWalletReportResult>("EXEC @returnValue = [dbo].[GetAutoleasingWalletReport] @insuranceCompanyID, @startDate, @endDate, @email, @mobile, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBcareWithdrawalListWithFilterResult>> GetBcareWithdrawalListWithFilterAsync(int? productType, int? returnedNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "productType",
                    Value = productType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "returnedNumber",
                    Value = returnedNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBcareWithdrawalListWithFilterResult>("EXEC @returnValue = [dbo].[GetBcareWithdrawalListWithFilter] @productType, @returnedNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetBulkQuotationsDetailsResult>> GetBulkQuotationsDetailsAsync(string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 30,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetBulkQuotationsDetailsResult>("EXEC @returnValue = [dbo].[GetBulkQuotationsDetails] @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCheckoutAdditionalDriversResult>> GetCheckoutAdditionalDriversAsync(DataTable list, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "list",
                    Value = list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[StringList]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCheckoutAdditionalDriversResult>("EXEC @returnValue = [dbo].[GetCheckoutAdditionalDrivers] @list", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCheckoutDetailResult>> GetCheckoutDetailAsync(string phoneNumber, string email, string iban, Guid? driverId, string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "phoneNumber",
                    Size = 100,
                    Value = phoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 100,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iban",
                    Size = 100,
                    Value = iban ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverId",
                    Value = driverId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCheckoutDetailResult>("EXEC @returnValue = [dbo].[GetCheckoutDetail] @phoneNumber, @email, @iban, @driverId, @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCheckoutDetailTempResult>> GetCheckoutDetailTempAsync(string phoneNumber, string email, string iban, string nin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "phoneNumber",
                    Size = 100,
                    Value = phoneNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 100,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "iban",
                    Size = 100,
                    Value = iban ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCheckoutDetailTempResult>("EXEC @returnValue = [dbo].[GetCheckoutDetailTemp] @phoneNumber, @email, @iban, @nin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetClaimsDataBasedOnFilterResult>> GetClaimsDataBasedOnFilterAsync(int? ClaimId, string ReferenceId, string PolicyNo, string NationalId, int? StatusId, int? RequesterTypeId, int? AccidentReportNumber, DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? PageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ClaimId",
                    Value = ClaimId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 100,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusId",
                    Value = StatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RequesterTypeId",
                    Value = RequesterTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccidentReportNumber",
                    Value = AccidentReportNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetClaimsDataBasedOnFilterResult>("EXEC @returnValue = [dbo].[GetClaimsDataBasedOnFilter] @ClaimId, @ReferenceId, @PolicyNo, @NationalId, @StatusId, @RequesterTypeId, @AccidentReportNumber, @StartDate, @EndDate, @PageNumber, @PageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetClaimsDataBasedOnIdResult>> GetClaimsDataBasedOnIdAsync(int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetClaimsDataBasedOnIdResult>("EXEC @returnValue = [dbo].[GetClaimsDataBasedOnId] @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCompanyQuotationResponseForInitialQuoteResult>> GetCompanyQuotationResponseForInitialQuoteAsync(string ExternalId, int? InsuranceCompanyId, bool? AgencyRepair, int? Deductible, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ExternalId",
                    Size = 30,
                    Value = ExternalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AgencyRepair",
                    Value = AgencyRepair ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Deductible",
                    Value = Deductible ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCompanyQuotationResponseForInitialQuoteResult>("EXEC @returnValue = [dbo].[GetCompanyQuotationResponseForInitialQuote] @ExternalId, @InsuranceCompanyId, @AgencyRepair, @Deductible", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCorporateUsersLessThan2000Result>> GetCorporateUsersLessThan2000Async(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCorporateUsersLessThan2000Result>("EXEC @returnValue = [dbo].[GetCorporateUsersLessThan2000]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountPoliciesResult>> GetCountPoliciesAsync(string nin, string VehicleId, string channel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "channel",
                    Size = 100,
                    Value = channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountPoliciesResult>("EXEC @returnValue = [dbo].[GetCountPolicies] @nin, @VehicleId, @channel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCountPoliciesForAutoleasingResult>> GetCountPoliciesForAutoleasingAsync(string nin, string VehicleId, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCountPoliciesForAutoleasingResult>("EXEC @returnValue = [dbo].[GetCountPoliciesForAutoleasing] @nin, @VehicleId, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetCustomCardSuccessPoliciesResult>> GetCustomCardSuccessPoliciesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetCustomCardSuccessPoliciesResult>("EXEC @returnValue = [dbo].[GetCustomCardSuccessPolicies]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDriverByNinResult>> GetDriverByNinAsync(string driverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDriverByNinResult>("EXEC @returnValue = [dbo].[GetDriverByNin] @driverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDriverInsuranceRecordDataResult>> GetDriverInsuranceRecordDataAsync(string ReferenceId, string BasicExternalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 200,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BasicExternalId",
                    Size = 200,
                    Value = BasicExternalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDriverInsuranceRecordDataResult>("EXEC @returnValue = [dbo].[GetDriverInsuranceRecordData] @ReferenceId, @BasicExternalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDriverLicenseResult>> GetDriverLicenseAsync(string nin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nin",
                    Size = 100,
                    Value = nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDriverLicenseResult>("EXEC @returnValue = [dbo].[GetDriverLicense] @nin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetDriversWithMoreThanFivePoliciesResult>> GetDriversWithMoreThanFivePoliciesAsync(DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? PageSize, bool? IsExport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsExport",
                    Value = IsExport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetDriversWithMoreThanFivePoliciesResult>("EXEC @returnValue = [dbo].[GetDriversWithMoreThanFivePolicies] @StartDate, @EndDate, @PageNumber, @PageSize, @IsExport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEdaatNotificationDataResult>> GetEdaatNotificationDataAsync(string invoiceNo, string referenceId, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "invoiceNo",
                    Size = 100,
                    Value = invoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEdaatNotificationDataResult>("EXEC @returnValue = [dbo].[GetEdaatNotificationData] @invoiceNo, @referenceId, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetEdaatRequestsByNationalIDResult>> GetEdaatRequestsByNationalIDAsync(string nationalID, DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nationalID",
                    Size = 100,
                    Value = nationalID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetEdaatRequestsByNationalIDResult>("EXEC @returnValue = [dbo].[GetEdaatRequestsByNationalID] @nationalID, @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetExpiredEsalInvoicesResult>> GetExpiredEsalInvoicesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetExpiredEsalInvoicesResult>("EXEC @returnValue = [dbo].[GetExpiredEsalInvoices]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFailedPaymentTransferredOperationResult>> GetFailedPaymentTransferredOperationAsync(DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFailedPaymentTransferredOperationResult>("EXEC @returnValue = [dbo].[GetFailedPaymentTransferredOperation] @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFirstYearPolicyStatisticsResult>> GetFirstYearPolicyStatisticsAsync(string SequenceNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "SequenceNumber",
                    Size = 100,
                    Value = SequenceNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFirstYearPolicyStatisticsResult>("EXEC @returnValue = [dbo].[GetFirstYearPolicyStatistics] @SequenceNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromAutoleasingQuotationResponseCacheResult>> GetFromAutoleasingQuotationResponseCacheAsync(int? insuranceCompanyId, string externalId, bool? vehicleAgencyRepair, int? deductibleValue, Guid? userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleAgencyRepair",
                    Value = vehicleAgencyRepair ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "deductibleValue",
                    Value = deductibleValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromAutoleasingQuotationResponseCacheResult>("EXEC @returnValue = [dbo].[GetFromAutoleasingQuotationResponseCache] @insuranceCompanyId, @externalId, @vehicleAgencyRepair, @deductibleValue, @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromCheckoutByReferenceIdResult>> GetFromCheckoutByReferenceIdAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromCheckoutByReferenceIdResult>("EXEC @returnValue = [dbo].[GetFromCheckoutByReferenceId] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromQuotationResponseResult>> GetFromQuotationResponseAsync(string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromQuotationResponseResult>("EXEC @returnValue = [dbo].[GetFromQuotationResponse] @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromQuotationResponseCacheResult>> GetFromQuotationResponseCacheAsync(int? insuranceCompanyId, int? insuranceTypeCode, string externalId, bool? vehicleAgencyRepair, int? deductibleValue, Guid? userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceTypeCode",
                    Value = insuranceTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleAgencyRepair",
                    Value = vehicleAgencyRepair ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "deductibleValue",
                    Value = deductibleValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromQuotationResponseCacheResult>("EXEC @returnValue = [dbo].[GetFromQuotationResponseCache] @insuranceCompanyId, @insuranceTypeCode, @externalId, @vehicleAgencyRepair, @deductibleValue, @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromQuotationResponseCacheAutoleasingResult>> GetFromQuotationResponseCacheAutoleasingAsync(int? insuranceCompanyId, int? insuranceTypeCode, string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceTypeCode",
                    Value = insuranceTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromQuotationResponseCacheAutoleasingResult>("EXEC @returnValue = [dbo].[GetFromQuotationResponseCacheAutoleasing] @insuranceCompanyId, @insuranceTypeCode, @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromScheduleTaskResult>> GetFromScheduleTaskAsync(string Type, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Type",
                    Size = 510,
                    Value = Type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromScheduleTaskResult>("EXEC @returnValue = [dbo].[GetFromScheduleTask] @Type", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromSMSSkippedNumbersResult>> GetFromSMSSkippedNumbersAsync(string PhoneNo, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PhoneNo",
                    Size = 200,
                    Value = PhoneNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromSMSSkippedNumbersResult>("EXEC @returnValue = [dbo].[GetFromSMSSkippedNumbers] @PhoneNo, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHyperpayRequestByMerchantTransactionIdResult>> GetHyperpayRequestByMerchantTransactionIdAsync(Guid? merchantTransactionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "merchantTransactionId",
                    Value = merchantTransactionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetHyperpayRequestByMerchantTransactionIdResult>("EXEC @returnValue = [dbo].[GetHyperpayRequestByMerchantTransactionId] @merchantTransactionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHyperpayRequestByReferenceIdResult>> GetHyperpayRequestByReferenceIdAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetHyperpayRequestByReferenceIdResult>("EXEC @returnValue = [dbo].[GetHyperpayRequestByReferenceId] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetHyperpayRequestInfoResult>> GetHyperpayRequestInfoAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetHyperpayRequestInfoResult>("EXEC @returnValue = [dbo].[GetHyperpayRequestInfo] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIInsuredByNationalIdResult>> GetIInsuredByNationalIdAsync(string nationalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 100,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIInsuredByNationalIdResult>("EXEC @returnValue = [dbo].[GetIInsuredByNationalId] @nationalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIncomeReportWithFilterResult>> GetIncomeReportWithFilterAsync(DateTime? startDate, DateTime? endDate, int? insuranceCompanyId, int? productTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "productTypeId",
                    Value = productTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIncomeReportWithFilterResult>("EXEC @returnValue = [dbo].[GetIncomeReportWithFilter] @startDate, @endDate, @insuranceCompanyId, @productTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetInsuracneProposalPolicesResult>> GetInsuracneProposalPolicesAsync(string NationalId, string VehicleId, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 256,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 20,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetInsuracneProposalPolicesResult>("EXEC @returnValue = [dbo].[GetInsuracneProposalPolices] @NationalId, @VehicleId, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIntialQuotationResult>> GetIntialQuotationAsync(string Nin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nin",
                    Size = 100,
                    Value = Nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIntialQuotationResult>("EXEC @returnValue = [dbo].[GetIntialQuotation] @Nin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetIVRRenewalePolicyDriversCheckoutuserIdAndPolicyNoResult>> GetIVRRenewalePolicyDriversCheckoutuserIdAndPolicyNoAsync(string userId, string policyNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNumber",
                    Size = 72,
                    Value = policyNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetIVRRenewalePolicyDriversCheckoutuserIdAndPolicyNoResult>("EXEC @returnValue = [dbo].[GetIVRRenewalePolicyDriversCheckoutuserIdAndPolicyNo] @userId, @policyNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLastPolicyBySequenceOrCustomCardNumberResult>> GetLastPolicyBySequenceOrCustomCardNumberAsync(string sequenceOrCustomCardNumber, string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLastPolicyBySequenceOrCustomCardNumberResult>("EXEC @returnValue = [dbo].[GetLastPolicyBySequenceOrCustomCardNumber] @sequenceOrCustomCardNumber, @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLastPruchasedCheckoutDetailsByNINResult>> GetLastPruchasedCheckoutDetailsByNINAsync(string driverNIN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNIN",
                    Size = 40,
                    Value = driverNIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLastPruchasedCheckoutDetailsByNINResult>("EXEC @returnValue = [dbo].[GetLastPruchasedCheckoutDetailsByNIN] @driverNIN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLeasingOrderItemByReferenceIdResult>> GetLeasingOrderItemByReferenceIdAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLeasingOrderItemByReferenceIdResult>("EXEC @returnValue = [dbo].[GetLeasingOrderItemByReferenceId] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLeasingPolicyDataResult>> GetLeasingPolicyDataAsync(string policyNo, string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLeasingPolicyDataResult>("EXEC @returnValue = [dbo].[GetLeasingPolicyData] @policyNo, @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLeasingProfileBasicDataResult>> GetLeasingProfileBasicDataAsync(string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLeasingProfileBasicDataResult>("EXEC @returnValue = [dbo].[GetLeasingProfileBasicData] @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetleasingprofilePolicyDataResult>> GetleasingprofilePolicyDataAsync(string UserId, string nationalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserId",
                    Size = 256,
                    Value = UserId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetleasingprofilePolicyDataResult>("EXEC @returnValue = [dbo].[GetleasingprofilePolicyData] @UserId, @nationalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLeasingShoppingCartItemDBResult>> GetLeasingShoppingCartItemDBAsync(string userId, string referenceId, Guid? productId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productId",
                    Value = productId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLeasingShoppingCartItemDBResult>("EXEC @returnValue = [dbo].[GetLeasingShoppingCartItemDB] @userId, @referenceId, @productId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetLowestProductByPriceResult>> GetLowestProductByPriceAsync(string qtRqstExtrnlId, bool? vehicleAgencyRepair, int? deductibleValue, int? productTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "qtRqstExtrnlId",
                    Size = 100,
                    Value = qtRqstExtrnlId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleAgencyRepair",
                    Value = vehicleAgencyRepair ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "deductibleValue",
                    Value = deductibleValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "productTypeId",
                    Value = productTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetLowestProductByPriceResult>("EXEC @returnValue = [dbo].[GetLowestProductByPrice] @qtRqstExtrnlId, @vehicleAgencyRepair, @deductibleValue, @productTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetNajmAverageResponseTimeResult>> GetNajmAverageResponseTimeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetNajmAverageResponseTimeResult>("EXEC @returnValue = [dbo].[GetNajmAverageResponseTime]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOldPolicyDataResult>> GetOldPolicyDataAsync(string vehicleId, string driverNIN, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 200,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "driverNIN",
                    Size = 200,
                    Value = driverNIN ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOldPolicyDataResult>("EXEC @returnValue = [dbo].[GetOldPolicyData] @vehicleId, @driverNIN", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetOwnDamageQueueResult>> GetOwnDamageQueueAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetOwnDamageQueueResult>("EXEC @returnValue = [dbo].[GetOwnDamageQueue]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPaymentMethodsStatisticsInfoResult>> GetPaymentMethodsStatisticsInfoAsync(DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPaymentMethodsStatisticsInfoResult>("EXEC @returnValue = [dbo].[GetPaymentMethodsStatisticsInfo] @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPoliciesCountStatisticsForBcareWithdrawalResult>> GetPoliciesCountStatisticsForBcareWithdrawalAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPoliciesCountStatisticsForBcareWithdrawalResult>("EXEC @returnValue = [dbo].[GetPoliciesCountStatisticsForBcareWithdrawal]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyDataResult>> GetPolicyDataAsync(string policyNo, string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyDataResult>("EXEC @returnValue = [dbo].[GetPolicyData] @policyNo, @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyForOwnDamageSMSResult>> GetPolicyForOwnDamageSMSAsync(DateTime? EndDate, DateTime? StartDate, int? ModelYear, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ModelYear",
                    Value = ModelYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyForOwnDamageSMSResult>("EXEC @returnValue = [dbo].[GetPolicyForOwnDamageSMS] @EndDate, @StartDate, @ModelYear, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyInfoForRenewalResult>> GetPolicyInfoForRenewalAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyInfoForRenewalResult>("EXEC @returnValue = [dbo].[GetPolicyInfoForRenewal]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyInformationForMorniResult>> GetPolicyInformationForMorniAsync(string refrenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "refrenceId",
                    Size = 200,
                    Value = refrenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyInformationForMorniResult>("EXEC @returnValue = [dbo].[GetPolicyInformationForMorni] @refrenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyInformationForRoadAssistanceResult>> GetPolicyInformationForRoadAssistanceAsync(DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyInformationForRoadAssistanceResult>("EXEC @returnValue = [dbo].[GetPolicyInformationForRoadAssistance] @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyProcessingQueueResult>> GetPolicyProcessingQueueAsync(string NationalId, string VehicleId, string ReferenceNo, int? ProductTypeId, int? CompanyId, DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? PageSize, bool? IsExport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 100,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductTypeId",
                    Value = ProductTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsExport",
                    Value = IsExport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyProcessingQueueResult>("EXEC @returnValue = [dbo].[GetPolicyProcessingQueue] @NationalId, @VehicleId, @ReferenceNo, @ProductTypeId, @CompanyId, @StartDate, @EndDate, @PageNumber, @PageSize, @IsExport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyRequestTimeResult>> GetPolicyRequestTimeAsync(string PolicyNo, string ReferenceNo, string StartDate, string EndDate, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 200,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 200,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 200,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 200,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyRequestTimeResult>("EXEC @returnValue = [dbo].[GetPolicyRequestTime] @PolicyNo, @ReferenceNo, @StartDate, @EndDate, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyStatisticsDataResult>> GetPolicyStatisticsDataAsync(DateTime? StartDate, DateTime? EndDate, int? InsuranceCompanyId, int? PageNumber, int? PageSize, int? IsExcel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsExcel",
                    Value = IsExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyStatisticsDataResult>("EXEC @returnValue = [dbo].[GetPolicyStatisticsData] @StartDate, @EndDate, @InsuranceCompanyId, @PageNumber, @PageSize, @IsExcel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPreviousPolicyDetailsResult>> GetPreviousPolicyDetailsAsync(string driverNin, string VehicleId, DateTime? startDate, DateTime? endDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 100,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPreviousPolicyDetailsResult>("EXEC @returnValue = [dbo].[GetPreviousPolicyDetails] @driverNin, @VehicleId, @startDate, @endDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPriceDetailsByProductIdsListResult>> GetPriceDetailsByProductIdsListAsync(DataTable productIdList, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "productIdList",
                    Value = productIdList ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[StringList]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPriceDetailsByProductIdsListResult>("EXEC @returnValue = [dbo].[GetPriceDetailsByProductIdsList] @productIdList", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProcessingQueueResult>> GetProcessingQueueAsync(string companyKey, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 100,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProcessingQueueResult>("EXEC @returnValue = [dbo].[GetProcessingQueue] @companyKey", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetProductDetailsResult>> GetProductDetailsAsync(string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetProductDetailsResult>("EXEC @returnValue = [dbo].[GetProductDetails] @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPurchaseStatisticsResult>> GetPurchaseStatisticsAsync(DateTime? StartDate, DateTime? EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPurchaseStatisticsResult>("EXEC @returnValue = [dbo].[GetPurchaseStatistics] @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationBlockedUserDetailsResult>> GetQuotationBlockedUserDetailsAsync(string NationalId, int? PageNumber, int? PageSize, int? IsExport, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsExport",
                    Value = IsExport ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationBlockedUserDetailsResult>("EXEC @returnValue = [dbo].[GetQuotationBlockedUserDetails] @NationalId, @PageNumber, @PageSize, @IsExport", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationDetailsByReferenceIdResult>> GetQuotationDetailsByReferenceIdAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationDetailsByReferenceIdResult>("EXEC @returnValue = [dbo].[GetQuotationDetailsByReferenceId] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationInsuranceCompanyResult>> GetQuotationInsuranceCompanyAsync(string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationInsuranceCompanyResult>("EXEC @returnValue = [dbo].[GetQuotationInsuranceCompany] @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationRequestAndDriversInfoResult>> GetQuotationRequestAndDriversInfoAsync(string ReferenceId, string ExternalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ExternalId",
                    Size = 100,
                    Value = ExternalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationRequestAndDriversInfoResult>("EXEC @returnValue = [dbo].[GetQuotationRequestAndDriversInfo] @ReferenceId, @ExternalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationRequestDataDBResult>> GetQuotationRequestDataDBAsync(string qtRqstExtrnlId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "qtRqstExtrnlId",
                    Size = 100,
                    Value = qtRqstExtrnlId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationRequestDataDBResult>("EXEC @returnValue = [dbo].[GetQuotationRequestDataDB] @qtRqstExtrnlId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationRequestVehicleInfoResult>> GetQuotationRequestVehicleInfoAsync(string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 40,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationRequestVehicleInfoResult>("EXEC @returnValue = [dbo].[GetQuotationRequestVehicleInfo] @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationResponseResult>> GetQuotationResponseAsync(string ReferenceId, string productId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productId",
                    Size = 100,
                    Value = productId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationResponseResult>("EXEC @returnValue = [dbo].[GetQuotationResponse] @ReferenceId, @productId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationsDetailsResult>> GetQuotationsDetailsAsync(string externalId, int? deductible, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 30,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "deductible",
                    Value = deductible ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationsDetailsResult>("EXEC @returnValue = [dbo].[GetQuotationsDetails] @externalId, @deductible", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationsFormDetailsByExternalIdResult>> GetQuotationsFormDetailsByExternalIdAsync(string externalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 30,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationsFormDetailsByExternalIdResult>("EXEC @returnValue = [dbo].[GetQuotationsFormDetailsByExternalId] @externalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetRenewalPoliciesResult>> GetRenewalPoliciesAsync(DateTime? startDate, DateTime? endDate, int? notificationNo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "notificationNo",
                    Value = notificationNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetRenewalPoliciesResult>("EXEC @returnValue = [dbo].[GetRenewalPolicies] @startDate, @endDate, @notificationNo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetRequestInfoForApplePayResult>> GetRequestInfoForApplePayAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetRequestInfoForApplePayResult>("EXEC @returnValue = [dbo].[GetRequestInfoForApplePay] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSamaReportResult>> GetSamaReportAsync(DateTime? startDate, DateTime? endDate, string referenceId, int? insuranceCompanyID, string policyHolderName, string mobile, string email, string policyNo, int? productTypeCode, DateTime? driverBirthDateFrom, DateTime? driverBirthDateTo, int? pageNumber, int? pageSize, bool? isExcel, string channel, Guid? merchantId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 40,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyID",
                    Value = insuranceCompanyID ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "policyHolderName",
                    Size = 400,
                    Value = policyHolderName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "mobile",
                    Size = 40,
                    Value = mobile ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 400,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 72,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productTypeCode",
                    Value = productTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "driverBirthDateFrom",
                    Value = driverBirthDateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "driverBirthDateTo",
                    Value = driverBirthDateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isExcel",
                    Value = isExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "channel",
                    Size = 100,
                    Value = channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "merchantId",
                    Value = merchantId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSamaReportResult>("EXEC @returnValue = [dbo].[GetSamaReport] @startDate, @endDate, @referenceId, @insuranceCompanyID, @policyHolderName, @mobile, @email, @policyNo, @productTypeCode, @driverBirthDateFrom, @driverBirthDateTo, @pageNumber, @pageSize, @isExcel, @channel, @merchantId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSamaReportPoliciesFromDBWithFilterResult>> GetSamaReportPoliciesFromDBWithFilterAsync(string PolicyNo, string StartDateString, string EndDateString, string NationalId, string ReferenceNo, string SequenceNo, string CustomNo, string InsuredEmail, string InsuredFirstNameAr, string InsuredLastNameAr, int? NajmStatusId, int? InvoiceNo, int? InsuranceCompanyId, short? ProductTypeId, string Channel, int? PageNumber, int? PageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDateString",
                    Size = 100,
                    Value = StartDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDateString",
                    Size = 100,
                    Value = EndDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SequenceNo",
                    Size = 20,
                    Value = SequenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomNo",
                    Size = 20,
                    Value = CustomNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredEmail",
                    Size = 100,
                    Value = InsuredEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredFirstNameAr",
                    Size = 100,
                    Value = InsuredFirstNameAr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredLastNameAr",
                    Size = 100,
                    Value = InsuredLastNameAr ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NajmStatusId",
                    Value = NajmStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ProductTypeId",
                    Value = ProductTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "Channel",
                    Size = 20,
                    Value = Channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSamaReportPoliciesFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetSamaReportPoliciesFromDBWithFilter] @PolicyNo, @StartDateString, @EndDateString, @NationalId, @ReferenceNo, @SequenceNo, @CustomNo, @InsuredEmail, @InsuredFirstNameAr, @InsuredLastNameAr, @NajmStatusId, @InvoiceNo, @InsuranceCompanyId, @ProductTypeId, @Channel, @PageNumber, @PageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShadowAccountDetailsResult>> GetShadowAccountDetailsAsync(string NationalId, string VehicleId, int? bankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 256,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 20,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "bankId",
                    Value = bankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShadowAccountDetailsResult>("EXEC @returnValue = [dbo].[GetShadowAccountDetails] @NationalId, @VehicleId, @bankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShoppingCartItemResult>> GetShoppingCartItemAsync(string userId, string referenceId, Guid? productId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productId",
                    Value = productId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShoppingCartItemResult>("EXEC @returnValue = [dbo].[GetShoppingCartItem] @userId, @referenceId, @productId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetShoppingCartItemDBResult>> GetShoppingCartItemDBAsync(string userId, string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetShoppingCartItemDBResult>("EXEC @returnValue = [dbo].[GetShoppingCartItemDB] @userId, @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetSmsRenewalNotificationsRehitResult>> GetSmsRenewalNotificationsRehitAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetSmsRenewalNotificationsRehitResult>("EXEC @returnValue = [dbo].[GetSmsRenewalNotificationsRehit]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTabbyItemsResult>> GetTabbyItemsAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 510,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTabbyItemsResult>("EXEC @returnValue = [dbo].[GetTabbyItems] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTicketDetailsResult>> GetTicketDetailsAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTicketDetailsResult>("EXEC @returnValue = [dbo].[GetTicketDetails] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTicketHistoriesResult>> GetTicketHistoriesAsync(int? id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTicketHistoriesResult>("EXEC @returnValue = [dbo].[GetTicketHistories] @id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTicketHistoryForExportResult>> GetTicketHistoryForExportAsync(string userEmail, string startDate, string endDate, int? statusId, string NationalId, string PolicyNo, int? InvoiceNo, string checkedOutEmail, string checkedOutPhone, string ReferenceNo, int? ticketTypeId, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userEmail",
                    Size = 100,
                    Value = userEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDate",
                    Size = 100,
                    Value = startDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDate",
                    Size = 100,
                    Value = endDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusId",
                    Value = statusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 20,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InvoiceNo",
                    Value = InvoiceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "checkedOutEmail",
                    Size = 100,
                    Value = checkedOutEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "checkedOutPhone",
                    Size = 100,
                    Value = checkedOutPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ticketTypeId",
                    Value = ticketTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTicketHistoryForExportResult>("EXEC @returnValue = [dbo].[GetTicketHistoryForExport] @userEmail, @startDate, @endDate, @statusId, @NationalId, @PolicyNo, @InvoiceNo, @checkedOutEmail, @checkedOutPhone, @ReferenceNo, @ticketTypeId, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTicketTypesResult>> GetTicketTypesAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTicketTypesResult>("EXEC @returnValue = [dbo].[GetTicketTypes]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetTotalBenfitsAsync(string references, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "references",
                    Size = -1,
                    Value = references ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetTotalBenfits] @references", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetTotalVehicleSadadRequestsPerDayResult>> GetTotalVehicleSadadRequestsPerDayAsync(string VehicleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 256,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetTotalVehicleSadadRequestsPerDayResult>("EXEC @returnValue = [dbo].[GetTotalVehicleSadadRequestsPerDay] @VehicleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserActivePoliciesByNinResult>> GetUserActivePoliciesByNinAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 100,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserActivePoliciesByNinResult>("EXEC @returnValue = [dbo].[GetUserActivePoliciesByNin] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserActivePoliciesCountResult>> GetUserActivePoliciesCountAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 100,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserActivePoliciesCountResult>("EXEC @returnValue = [dbo].[GetUserActivePoliciesCount] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserAddressesResult>> GetUserAddressesAsync(string userId, int? pageIndex, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageIndex",
                    Value = pageIndex ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserAddressesResult>("EXEC @returnValue = [dbo].[GetUserAddresses] @userId, @pageIndex, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserByPhoneResult>> GetUserByPhoneAsync(string phone, string formatedPhone, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "phone",
                    Size = 40,
                    Value = phone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "formatedPhone",
                    Size = 40,
                    Value = formatedPhone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserByPhoneResult>("EXEC @returnValue = [dbo].[GetUserByPhone] @phone, @formatedPhone", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserDBByIDResult>> GetUserDBByIDAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserDBByIDResult>("EXEC @returnValue = [dbo].[GetUserDBByID] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserFailedPoliciesResult>> GetUserFailedPoliciesAsync(string Nin, string SequenceNumber, string CustomCardNumber, string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nin",
                    Size = 100,
                    Value = Nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SequenceNumber",
                    Size = 100,
                    Value = SequenceNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomCardNumber",
                    Size = 100,
                    Value = CustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 40,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserFailedPoliciesResult>("EXEC @returnValue = [dbo].[GetUserFailedPolicies] @Nin, @SequenceNumber, @CustomCardNumber, @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserInvoiceByInvoiceIdResult>> GetUserInvoiceByInvoiceIdAsync(string userId, int? invoiceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "invoiceId",
                    Value = invoiceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserInvoiceByInvoiceIdResult>("EXEC @returnValue = [dbo].[GetUserInvoiceByInvoiceId] @userId, @invoiceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserPoliciesResult>> GetUserPoliciesAsync(string Nin, string SequenceNumber, string CustomCardNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nin",
                    Size = 100,
                    Value = Nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SequenceNumber",
                    Size = 100,
                    Value = SequenceNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CustomCardNumber",
                    Size = 100,
                    Value = CustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserPoliciesResult>("EXEC @returnValue = [dbo].[GetUserPolicies] @Nin, @SequenceNumber, @CustomCardNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserPromotionProgramResult>> GetUserPromotionProgramAsync(string userId, int? insuranceCompanyId, int? insuranceTypeCode, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 510,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceTypeCode",
                    Value = insuranceTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserPromotionProgramResult>("EXEC @returnValue = [dbo].[GetUserPromotionProgram] @userId, @insuranceCompanyId, @insuranceTypeCode", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserPromotionProgramInfoResult>> GetUserPromotionProgramInfoAsync(string userId, int? insuranceCompanyId, int? insuranceTypeCode, string nationalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 510,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceTypeCode",
                    Value = insuranceTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserPromotionProgramInfoResult>("EXEC @returnValue = [dbo].[GetUserPromotionProgramInfo] @userId, @insuranceCompanyId, @insuranceTypeCode, @nationalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserPromotionProgramInfo1Result>> GetUserPromotionProgramInfo1Async(string userId, int? insuranceCompanyId, int? insuranceTypeCode, string nationalId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 510,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceTypeCode",
                    Value = insuranceTypeCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserPromotionProgramInfo1Result>("EXEC @returnValue = [dbo].[GetUserPromotionProgramInfo1] @userId, @insuranceCompanyId, @insuranceTypeCode, @nationalId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserSuccessPoliciesResult>> GetUserSuccessPoliciesAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 256,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserSuccessPoliciesResult>("EXEC @returnValue = [dbo].[GetUserSuccessPolicies] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserSuccessPoliciesDetailsResult>> GetUserSuccessPoliciesDetailsAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 256,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserSuccessPoliciesDetailsResult>("EXEC @returnValue = [dbo].[GetUserSuccessPoliciesDetails] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserSuccessPoliciesDetailsForCorprateResult>> GetUserSuccessPoliciesDetailsForCorprateAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 256,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserSuccessPoliciesDetailsForCorprateResult>("EXEC @returnValue = [dbo].[GetUserSuccessPoliciesDetailsForCorprate] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserSuccessPoliciesInfoResult>> GetUserSuccessPoliciesInfoAsync(string DriverNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DriverNin",
                    Size = 256,
                    Value = DriverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserSuccessPoliciesInfoResult>("EXEC @returnValue = [dbo].[GetUserSuccessPoliciesInfo] @DriverNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserTicketHistoryResult>> GetUserTicketHistoryAsync(int? userTicketId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userTicketId",
                    Value = userTicketId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserTicketHistoryResult>("EXEC @returnValue = [dbo].[GetUserTicketHistory] @userTicketId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetUserTicketsWithLastHistoryResult>> GetUserTicketsWithLastHistoryAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetUserTicketsWithLastHistoryResult>("EXEC @returnValue = [dbo].[GetUserTicketsWithLastHistory] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclePolicyResult>> GetVehiclePolicyAsync(string VehicleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclePolicyResult>("EXEC @returnValue = [dbo].[GetVehiclePolicy] @VehicleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclePolicyDetailsResult>> GetVehiclePolicyDetailsAsync(string VehicleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclePolicyDetailsResult>("EXEC @returnValue = [dbo].[GetVehiclePolicyDetails] @VehicleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclesByNinResult>> GetVehiclesByNinAsync(string Nin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nin",
                    Size = 100,
                    Value = Nin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclesByNinResult>("EXEC @returnValue = [dbo].[GetVehiclesByNin] @Nin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclesBySequenceNumberORCustomCardNumberResult>> GetVehiclesBySequenceNumberORCustomCardNumberAsync(string VehicleId, int? pageNumber, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 100,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclesBySequenceNumberORCustomCardNumberResult>("EXEC @returnValue = [dbo].[GetVehiclesBySequenceNumberORCustomCardNumber] @VehicleId, @pageNumber, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclesInfoByExternalIdResult>> GetVehiclesInfoByExternalIdAsync(string externalId, string CarOwnerNin, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 100,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CarOwnerNin",
                    Size = 100,
                    Value = CarOwnerNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclesInfoByExternalIdResult>("EXEC @returnValue = [dbo].[GetVehiclesInfoByExternalId] @externalId, @CarOwnerNin", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehiclesInfoByIdResult>> GetVehiclesInfoByIdAsync(Guid? VehicleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehiclesInfoByIdResult>("EXEC @returnValue = [dbo].[GetVehiclesInfoById] @VehicleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehicleSuccessPoliciesWithFilterForAddBenefitsResult>> GetVehicleSuccessPoliciesWithFilterForAddBenefitsAsync(string PolicyNo, string ReferenceNo, string InsuredId, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredId",
                    Size = 30,
                    Value = InsuredId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehicleSuccessPoliciesWithFilterForAddBenefitsResult>("EXEC @returnValue = [dbo].[GetVehicleSuccessPoliciesWithFilterForAddBenefits] @PolicyNo, @ReferenceNo, @InsuredId, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVehicleSuccessPoliciesWithFilterForAddvechiledriverResult>> GetVehicleSuccessPoliciesWithFilterForAddvechiledriverAsync(string PolicyNo, string ReferenceNo, string InsuredId, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 72,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 30,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredId",
                    Size = 30,
                    Value = InsuredId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVehicleSuccessPoliciesWithFilterForAddvechiledriverResult>("EXEC @returnValue = [dbo].[GetVehicleSuccessPoliciesWithFilterForAddvechiledriver] @PolicyNo, @ReferenceNo, @InsuredId, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetVerifiedEmailCheckoutDetailResult>> GetVerifiedEmailCheckoutDetailAsync(string driverNin, string email, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "driverNin",
                    Size = 510,
                    Value = driverNin ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "email",
                    Size = 510,
                    Value = email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetVerifiedEmailCheckoutDetailResult>("EXEC @returnValue = [dbo].[GetVerifiedEmailCheckoutDetail] @driverNin, @email", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetWareefCategoryPartnersResult>> GetWareefCategoryPartnersAsync(int? CategoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CategoryId",
                    Value = CategoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetWareefCategoryPartnersResult>("EXEC @returnValue = [dbo].[GetWareefCategoryPartners] @CategoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetWareefDiscountsListSPResult>> GetWareefDiscountsListSPAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetWareefDiscountsListSPResult>("EXEC @returnValue = [dbo].[GetWareefDiscountsListSP]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetWareefItemsDetailsResult>> GetWareefItemsDetailsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetWareefItemsDetailsResult>("EXEC @returnValue = [dbo].[GetWareefItemsDetails]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetWataniyaNajmProcessingQueueResult>> GetWataniyaNajmProcessingQueueAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetWataniyaNajmProcessingQueueResult>("EXEC @returnValue = [dbo].[GetWataniyaNajmProcessingQueue]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertIntoProcessingQueueResult>> InsertIntoProcessingQueueAsync(string referenceId, int? CompanyId, string CompanyName, string channel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyName",
                    Size = 510,
                    Value = CompanyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "channel",
                    Size = 256,
                    Value = channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertIntoProcessingQueueResult>("EXEC @returnValue = [dbo].[InsertIntoProcessingQueue] @referenceId, @CompanyId, @CompanyName, @channel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<InsertUserTicketAttahmentResult>> InsertUserTicketAttahmentAsync(DataTable tableAttachmentInfo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "tableAttachmentInfo",
                    Value = tableAttachmentInfo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Structured,
                    TypeName = "[dbo].[UserTicketAttachmentInfo]",
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<InsertUserTicketAttahmentResult>("EXEC @returnValue = [dbo].[InsertUserTicketAttahment] @tableAttachmentInfo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<IVRGetLastPolicyBySequenceOrCustomCardNumberResult>> IVRGetLastPolicyBySequenceOrCustomCardNumberAsync(string sequenceOrCustomCardNumber, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "sequenceOrCustomCardNumber",
                    Size = 40,
                    Value = sequenceOrCustomCardNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<IVRGetLastPolicyBySequenceOrCustomCardNumberResult>("EXEC @returnValue = [dbo].[IVRGetLastPolicyBySequenceOrCustomCardNumber] @sequenceOrCustomCardNumber", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MegaReportResult>> MegaReportAsync(string StartDate, string EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 200,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 200,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MegaReportResult>("EXEC @returnValue = [dbo].[MegaReport] @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NajmResponseTimeResult>> NajmResponseTimeAsync(string PolicyNo, string ReferenceNo, int? CompanyId, int? Export, string StartDate, string EndDate, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 200,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 200,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CompanyId",
                    Value = CompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Export",
                    Value = Export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 200,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 200,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NajmResponseTimeResult>("EXEC @returnValue = [dbo].[NajmResponseTime] @PolicyNo, @ReferenceNo, @CompanyId, @Export, @StartDate, @EndDate, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PolicyCheckoutDetailsResult>> PolicyCheckoutDetailsAsync(int? InsuranceCompanyId, string NationalId, string InsuredEmail, string PolicyNo, string VehicleId, string ReferenceNo, int? ProductTypeId, DateTime? EndDate, DateTime? StartDate, int? PageNumber, int? PageSize, bool? IsExcel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NationalId",
                    Size = 100,
                    Value = NationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredEmail",
                    Size = 450,
                    Value = InsuredEmail ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 100,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "VehicleId",
                    Size = 30,
                    Value = VehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 100,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ProductTypeId",
                    Value = ProductTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsExcel",
                    Value = IsExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PolicyCheckoutDetailsResult>("EXEC @returnValue = [dbo].[PolicyCheckoutDetails] @InsuranceCompanyId, @NationalId, @InsuredEmail, @PolicyNo, @VehicleId, @ReferenceNo, @ProductTypeId, @EndDate, @StartDate, @PageNumber, @PageSize, @IsExcel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<policyInfoForODResult>> policyInfoForODAsync(DateTime? EndDate, DateTime? StartDate, int? ModelYear, int? PageNumber, int? PageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "ModelYear",
                    Value = ModelYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<policyInfoForODResult>("EXEC @returnValue = [dbo].[policyInfoForOD] @EndDate, @StartDate, @ModelYear, @PageNumber, @PageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RemoveUserIdFromQuotationRequestResult>> RemoveUserIdFromQuotationRequestAsync(string userId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 256,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RemoveUserIdFromQuotationRequestResult>("EXEC @returnValue = [dbo].[RemoveUserIdFromQuotationRequest] @userId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RenwalStatitics_OldTableResult>> RenwalStatitics_OldTableAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RenwalStatitics_OldTableResult>("EXEC @returnValue = [dbo].[RenwalStatitics_OldTable]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SamaStatisticsCountReportResult>> SamaStatisticsCountReportAsync(string StartDate, string EndDate, int? IsExcel, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 100,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 100,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsExcel",
                    Value = IsExcel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SamaStatisticsCountReportResult>("EXEC @returnValue = [dbo].[SamaStatisticsCountReport] @StartDate, @EndDate, @IsExcel", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SamaStatisticsReport_TestResult>> SamaStatisticsReport_TestAsync(string StartDate, string EndDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 200,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 200,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SamaStatisticsReport_TestResult>("EXEC @returnValue = [dbo].[SamaStatisticsReport_Test] @StartDate, @EndDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<sp_WhoIsActiveResult>> sp_WhoIsActiveAsync(string filter, string filter_type, string not_filter, string not_filter_type, bool? show_own_spid, bool? show_system_spids, byte? show_sleeping_spids, bool? get_full_inner_text, byte? get_plans, bool? get_outer_command, bool? get_transaction_info, byte? get_task_info, bool? get_locks, bool? get_avg_time, bool? get_additional_info, bool? find_block_leaders, byte? delta_interval, string output_column_list, string sort_order, byte? format_output, string destination_table, bool? return_schema, bool? help, OutputParameter<string> schema, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterschema = new SqlParameter
            {
                ParameterName = "schema",
                Size = -1,
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = schema?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.VarChar,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "filter",
                    Size = 256,
                    Value = filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "filter_type",
                    Size = 10,
                    Value = filter_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "not_filter",
                    Size = 256,
                    Value = not_filter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "not_filter_type",
                    Size = 10,
                    Value = not_filter_type ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "show_own_spid",
                    Value = show_own_spid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "show_system_spids",
                    Value = show_system_spids ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "show_sleeping_spids",
                    Value = show_sleeping_spids ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "get_full_inner_text",
                    Value = get_full_inner_text ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "get_plans",
                    Value = get_plans ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "get_outer_command",
                    Value = get_outer_command ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "get_transaction_info",
                    Value = get_transaction_info ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "get_task_info",
                    Value = get_task_info ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "get_locks",
                    Value = get_locks ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "get_avg_time",
                    Value = get_avg_time ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "get_additional_info",
                    Value = get_additional_info ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "find_block_leaders",
                    Value = find_block_leaders ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "delta_interval",
                    Value = delta_interval ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "output_column_list",
                    Size = 8000,
                    Value = output_column_list ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sort_order",
                    Size = 500,
                    Value = sort_order ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "format_output",
                    Value = format_output ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "destination_table",
                    Size = 4000,
                    Value = destination_table ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "return_schema",
                    Value = return_schema ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterschema,
                new SqlParameter
                {
                    ParameterName = "help",
                    Value = help ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<sp_WhoIsActiveResult>("EXEC @returnValue = [dbo].[sp_WhoIsActive] @filter, @filter_type, @not_filter, @not_filter_type, @show_own_spid, @show_system_spids, @show_sleeping_spids, @get_full_inner_text, @get_plans, @get_outer_command, @get_transaction_info, @get_task_info, @get_locks, @get_avg_time, @get_additional_info, @find_block_leaders, @delta_interval, @output_column_list, @sort_order, @format_output, @destination_table, @return_schema, @schema OUTPUT, @help", sqlParameters, cancellationToken);

            schema.SetValue(parameterschema.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SuccessPolicystatisticsResult>> SuccessPolicystatisticsAsync(string ReferenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReferenceId",
                    Size = 100,
                    Value = ReferenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SuccessPolicystatisticsResult>("EXEC @returnValue = [dbo].[SuccessPolicystatistics] @ReferenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateAutoleasingQuotationForm_OldHistoryResult>> UpdateAutoleasingQuotationForm_OldHistoryAsync(int? id, bool? isDone, bool? isLocked, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "id",
                    Value = id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isDone",
                    Value = isDone ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "isLocked",
                    Value = isLocked ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateAutoleasingQuotationForm_OldHistoryResult>("EXEC @returnValue = [dbo].[UpdateAutoleasingQuotationForm_OldHistory] @id, @isDone, @isLocked", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateCheckoutWithPaymentStatusResult>> UpdateCheckoutWithPaymentStatusAsync(string referenceId, int? policyStatusId, int? paymentMethodId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyStatusId",
                    Value = policyStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "paymentMethodId",
                    Value = paymentMethodId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateCheckoutWithPaymentStatusResult>("EXEC @returnValue = [dbo].[UpdateCheckoutWithPaymentStatus] @referenceId, @policyStatusId, @paymentMethodId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateCheckoutWithPolicyStatusResult>> UpdateCheckoutWithPolicyStatusAsync(string referenceId, int? policyStatusId, DateTime? modifiedDate, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyStatusId",
                    Value = policyStatusId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "modifiedDate",
                    Value = modifiedDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateCheckoutWithPolicyStatusResult>("EXEC @returnValue = [dbo].[UpdateCheckoutWithPolicyStatus] @referenceId, @policyStatusId, @modifiedDate", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateHyperpayRequestStatusResult>> UpdateHyperpayRequestStatusAsync(string referenceId, int? Id, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateHyperpayRequestStatusResult>("EXEC @returnValue = [dbo].[UpdateHyperpayRequestStatus] @referenceId, @Id", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateQuotationRequestAdditionalDriversRelationShipResult>> UpdateQuotationRequestAdditionalDriversRelationShipAsync(int? quotationRequestId, string additionalDriversIds, string relationShipsCodes, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quotationRequestId",
                    Value = quotationRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "additionalDriversIds",
                    Size = -1,
                    Value = additionalDriversIds ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "relationShipsCodes",
                    Size = 100,
                    Value = relationShipsCodes ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateQuotationRequestAdditionalDriversRelationShipResult>("EXEC @returnValue = [dbo].[UpdateQuotationRequestAdditionalDriversRelationShip] @quotationRequestId, @additionalDriversIds, @relationShipsCodes", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> UpdateQuotationRequestWithNOAAsync(int? Id, int? InsuredId, int? NoOfAccident, string NajmResponse, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuredId",
                    Value = InsuredId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NoOfAccident",
                    Value = NoOfAccident ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NajmResponse",
                    Size = -1,
                    Value = NajmResponse ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[UpdateQuotationRequestWithNOA] @Id, @InsuredId, @NoOfAccident, @NajmResponse", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateQuotationResponseToBeCheckedoutResult>> UpdateQuotationResponseToBeCheckedoutAsync(string quotationResponseId, Guid? productid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "quotationResponseId",
                    Size = 256,
                    Value = quotationResponseId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "productid",
                    Value = productid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.UniqueIdentifier,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateQuotationResponseToBeCheckedoutResult>("EXEC @returnValue = [dbo].[UpdateQuotationResponseToBeCheckedout] @quotationResponseId, @productid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<updateRenewalStatiscs_oldResult>> updateRenewalStatiscs_oldAsync(string referenceId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 100,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<updateRenewalStatiscs_oldResult>("EXEC @returnValue = [dbo].[updateRenewalStatiscs_old] @referenceId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateScheduleTaskResult>> UpdateScheduleTaskAsync(int? Id, DateTime? LastStart, DateTime? LastEnd, DateTime? LastSuccess, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Id",
                    Value = Id ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "LastStart",
                    Value = LastStart ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastEnd",
                    Value = LastEnd ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "LastSuccess",
                    Value = LastSuccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateScheduleTaskResult>("EXEC @returnValue = [dbo].[UpdateScheduleTask] @Id, @LastStart, @LastEnd, @LastSuccess", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UpdateUserPromotionProgramWithNationalIdResult>> UpdateUserPromotionProgramWithNationalIdAsync(string userId, string nationalId, int? insuranceCompanyId, string promoCode, int? promotionProgramId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "userId",
                    Size = 510,
                    Value = userId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 510,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "insuranceCompanyId",
                    Value = insuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "promoCode",
                    Size = 510,
                    Value = promoCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "promotionProgramId",
                    Value = promotionProgramId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UpdateUserPromotionProgramWithNationalIdResult>("EXEC @returnValue = [dbo].[UpdateUserPromotionProgramWithNationalId] @userId, @nationalId, @insuranceCompanyId, @promoCode, @promotionProgramId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
