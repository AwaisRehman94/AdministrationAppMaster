// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Inquiry.API.Persistence.AutoLeaseLogModels.Persistence.AutoLeaseLogModels;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Inquiry.API.Persistence.AutoLeaseLogModels.Persistence.AutoLeaseLogModels
{
    public partial class AutoLeasingServiceLogContext
    {
        private IAutoLeasingServiceLogContextProcedures _procedures;

        public virtual IAutoLeasingServiceLogContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new AutoLeasingServiceLogContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IAutoLeasingServiceLogContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GetAllAppNotificationLogsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllSmsLogsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetAllSMSRenewalLogsFromDBWithFilterResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetFromServiceLogsResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetInsuranceCompanyAvgResponseTimeResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetPolicyNotificationsLogResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetQuotationStatusResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<GetWalaaPoliciesProcessingQueueResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_ServiceRequestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_ServiceRequest_OldResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<SP_ServiceRequestTestResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<TabbyWebHookServiceRequestLogResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<V_Count_ServicesRequestResult>().HasNoKey().ToView(null);
        }
    }

    public partial class AutoLeasingServiceLogContextProcedures : IAutoLeasingServiceLogContextProcedures
    {
        private readonly AutoLeasingServiceLogContext _context;

        public AutoLeasingServiceLogContextProcedures(AutoLeasingServiceLogContext context)
        {
            _context = context;
        }

        public virtual async Task<int> CompanyServicesLogFilterAsync(string companyname, string dateFrom, string dateTo, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyname",
                    Size = 100,
                    Value = companyname ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Size = 200,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Size = 200,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[CompanyServicesLogFilter] @companyname, @dateFrom, @dateTo, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllAppNotificationLogsFromDBWithFilterResult>> GetAllAppNotificationLogsFromDBWithFilterAsync(DateTime? startDateTime, DateTime? endDateTime, string referenceId, string channel, int? isSuccess, int? isError, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "referenceId",
                    Size = 30,
                    Value = referenceId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "channel",
                    Size = 60,
                    Value = channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isSuccess",
                    Value = isSuccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isError",
                    Value = isError ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllAppNotificationLogsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllAppNotificationLogsFromDBWithFilter] @startDateTime, @endDateTime, @referenceId, @channel, @isSuccess, @isError, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllSmsLogsFromDBWithFilterResult>> GetAllSmsLogsFromDBWithFilterAsync(string MobileNo, int? StatusCode, DateTime? DateFrom, DateTime? DateTo, string Method, int? PageNumber, int? PageSize, string Channel, string SMSProvider, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "MobileNo",
                    Size = 100,
                    Value = MobileNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StatusCode",
                    Value = StatusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "Method",
                    Size = 50,
                    Value = Method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Channel",
                    Size = 50,
                    Value = Channel ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SMSProvider",
                    Size = 50,
                    Value = SMSProvider ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllSmsLogsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllSmsLogsFromDBWithFilter] @MobileNo, @StatusCode, @DateFrom, @DateTo, @Method, @PageNumber, @PageSize, @Channel, @SMSProvider, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetAllSMSRenewalLogsFromDBWithFilterResult>> GetAllSMSRenewalLogsFromDBWithFilterAsync(DateTime? DateFrom, DateTime? DateTo, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "DateFrom",
                    Value = DateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "DateTo",
                    Value = DateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetAllSMSRenewalLogsFromDBWithFilterResult>("EXEC @returnValue = [dbo].[GetAllSMSRenewalLogsFromDBWithFilter] @DateFrom, @DateTo", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetAVGServiceRequestResponseTimeAsync(string StartDate, string EndDate, int? SuccessCode, int? ErrorCode, int? Vehicle, int? Autolease, string InsuranceTypeId, string InsuranceCompanyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 510,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 510,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SuccessCode",
                    Value = SuccessCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorCode",
                    Value = ErrorCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Vehicle",
                    Value = Vehicle ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Autolease",
                    Value = Autolease ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceTypeId",
                    Size = 10,
                    Value = InsuranceTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Size = 10,
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetAVGServiceRequestResponseTime] @StartDate, @EndDate, @SuccessCode, @ErrorCode, @Vehicle, @Autolease, @InsuranceTypeId, @InsuranceCompanyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetFromServiceLogsResult>> GetFromServiceLogsAsync(string reference, string externalId, int? companyId, string method, DateTime? startDateTime, DateTime? endDateTime, string sponsorId, int? statusCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "externalId",
                    Size = 30,
                    Value = externalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyId",
                    Value = companyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 60,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "sponsorId",
                    Size = 100,
                    Value = sponsorId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetFromServiceLogsResult>("EXEC @returnValue = [dbo].[GetFromServiceLogs] @reference, @externalId, @companyId, @method, @startDateTime, @endDateTime, @sponsorId, @statusCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetInsuranceCompanyAvgResponseTimeResult>> GetInsuranceCompanyAvgResponseTimeAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetInsuranceCompanyAvgResponseTimeResult>("EXEC @returnValue = [dbo].[GetInsuranceCompanyAvgResponseTime]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetPolicyNotificationsLogResult>> GetPolicyNotificationsLogAsync(string PolicyNo, string ReferenceNo, DateTime? StartDate, DateTime? EndDate, int? PageNumber, int? PageSize, int? InsuranceCompanyId, string MethodName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PolicyNo",
                    Size = 200,
                    Value = PolicyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ReferenceNo",
                    Size = 200,
                    Value = ReferenceNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PageNumber",
                    Value = PageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PageSize",
                    Value = PageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceCompanyId",
                    Value = InsuranceCompanyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "MethodName",
                    Size = 200,
                    Value = MethodName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetPolicyNotificationsLogResult>("EXEC @returnValue = [dbo].[GetPolicyNotificationsLog] @PolicyNo, @ReferenceNo, @StartDate, @EndDate, @PageNumber, @PageSize, @InsuranceCompanyId, @MethodName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetQuotationStatusResult>> GetQuotationStatusAsync(DateTime? startDateTime, DateTime? endDateTime, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetQuotationStatusResult>("EXEC @returnValue = [dbo].[GetQuotationStatus] @startDateTime, @endDateTime", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetServiceRequestsAsync(string StartDate, string EndDate, int? SuccessCode, int? ErrorCode, string InsuranceType, int? module, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "StartDate",
                    Size = 510,
                    Value = StartDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EndDate",
                    Size = 510,
                    Value = EndDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SuccessCode",
                    Value = SuccessCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ErrorCode",
                    Value = ErrorCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "InsuranceType",
                    Size = 20,
                    Value = InsuranceType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "module",
                    Value = module ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetServiceRequests] @StartDate, @EndDate, @SuccessCode, @ErrorCode, @InsuranceType, @module", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<int> GetServicesLogsAsync(string companyKey, string dateFrom, string dateTo, string method, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 100,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateFrom",
                    Size = 200,
                    Value = dateFrom ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dateTo",
                    Size = 200,
                    Value = dateTo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 100,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.Database.ExecuteSqlRawAsync("EXEC @returnValue = [dbo].[GetServicesLogs] @companyKey, @dateFrom, @dateTo, @method", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<GetWalaaPoliciesProcessingQueueResult>> GetWalaaPoliciesProcessingQueueAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<GetWalaaPoliciesProcessingQueueResult>("EXEC @returnValue = [dbo].[GetWalaaPoliciesProcessingQueue]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_ServiceRequestResult>> SP_ServiceRequestAsync(string reference, string companyKey, string method, DateTime? startDateTime, DateTime? endDateTime, string nationalId, string vehicleId, string policyNo, int? statusCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 30,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 60,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 30,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_ServiceRequestResult>("EXEC @returnValue = [dbo].[SP_ServiceRequest] @reference, @companyKey, @method, @startDateTime, @endDateTime, @nationalId, @vehicleId, @policyNo, @statusCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_ServiceRequest_OldResult>> SP_ServiceRequest_OldAsync(string reference, string companyKey, string method, string sratrDateString, string endDateString, string nationalId, string vehicleId, string policyNo, int? statusCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 30,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 60,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "sratrDateString",
                    Size = 100,
                    Value = sratrDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "endDateString",
                    Size = 100,
                    Value = endDateString ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 30,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_ServiceRequest_OldResult>("EXEC @returnValue = [dbo].[SP_ServiceRequest_Old] @reference, @companyKey, @method, @sratrDateString, @endDateString, @nationalId, @vehicleId, @policyNo, @statusCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<SP_ServiceRequestTestResult>> SP_ServiceRequestTestAsync(string reference, string companyKey, string method, DateTime? startDateTime, DateTime? endDateTime, string nationalId, string vehicleId, string policyNo, int? statusCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 30,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 60,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 30,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<SP_ServiceRequestTestResult>("EXEC @returnValue = [dbo].[SP_ServiceRequestTest] @reference, @companyKey, @method, @startDateTime, @endDateTime, @nationalId, @vehicleId, @policyNo, @statusCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<TabbyWebHookServiceRequestLogResult>> TabbyWebHookServiceRequestLogAsync(DateTime? startDateTime, DateTime? endDateTime, string nationalId, string vehicleId, string reference, int? isSuccess, int? isError, int? companyId, int? pageNumber, int? pageSize, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 30,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "isSuccess",
                    Value = isSuccess ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "isError",
                    Value = isError ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "companyId",
                    Value = companyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<TabbyWebHookServiceRequestLogResult>("EXEC @returnValue = [dbo].[TabbyWebHookServiceRequestLog] @startDateTime, @endDateTime, @nationalId, @vehicleId, @reference, @isSuccess, @isError, @companyId, @pageNumber, @pageSize", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<V_Count_ServicesRequestResult>> V_Count_ServicesRequestAsync(string reference, string companyKey, string method, DateTime? startDateTime, DateTime? endDateTime, string nationalId, string vehicleId, string policyNo, int? statusCode, int? pageNumber, int? pageSize, int? export, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "reference",
                    Size = 30,
                    Value = reference ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "companyKey",
                    Size = 100,
                    Value = companyKey ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "method",
                    Size = 60,
                    Value = method ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "startDateTime",
                    Value = startDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "endDateTime",
                    Value = endDateTime ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "nationalId",
                    Size = 30,
                    Value = nationalId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "vehicleId",
                    Size = 30,
                    Value = vehicleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "policyNo",
                    Size = 100,
                    Value = policyNo ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.NVarChar,
                },
                new SqlParameter
                {
                    ParameterName = "statusCode",
                    Value = statusCode ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageNumber",
                    Value = pageNumber ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "pageSize",
                    Value = pageSize ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "export",
                    Value = export ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<V_Count_ServicesRequestResult>("EXEC @returnValue = [dbo].[V_Count_ServicesRequest] @reference, @companyKey, @method, @startDateTime, @endDateTime, @nationalId, @vehicleId, @policyNo, @statusCode, @pageNumber, @pageSize, @export", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
